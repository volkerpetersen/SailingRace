package com.kaiserware.sailingrace;

import android.app.Activity;
import android.content.Context;

/**
 * Singleton Class which defines the Global Parameters used by the various
 * Activities to utilize common data values across all these Activities.
 * 
 * All angles are measure in Degrees True North
 * All speeds are measure in Nautical Miles per Hour (kts)
 *
 * Created by Volker Petersen November 2015.
 */
public class GlobalParameters {
    private static GlobalParameters mInstance = null;
    private double declination = 0.0d;
    public double courseBearing =Double.NaN;    // Direction of race course toward the wind
    public double courseLength=Double.NaN;      // Length of race course from Leeward to Windward mark
    public double courseOffset=Double.NaN;      // Distance between Left and Right side of course
    public int numberOfLegs=0;                  // Number of Legs to be sailed on this W/L course
    private double BoatLAT = Double.NaN;        // Lat of current Boat position
    private double BoatLON = Double.NaN;        // Lon of current Boat position
    private double LeewardLAT = Double.NaN;     // Lat of race course Leeward mark
    private double LeewardLON = Double.NaN;     // Lon of race course Leeward mark
    private double WindwardLAT = Double.NaN;    // Lat of race course Windward mark
    private double WindwardLON = Double.NaN;    // Lon of race course Windward mark
    private double CommitteeLAT = Double.NaN;   // Lat of starting line Committee Boat
    private double CommitteeLON = Double.NaN;   // Lon of starting line Committee Boat
    private double PinLAT = Double.NaN;         // Lat of starting line Pin end
    private double PinLON = Double.NaN;         // Lon of starting line Pin end
    private double CenterLAT = Double.NaN;      // Lat of race course Leeward mark
    private double CenterLON = Double.NaN;      // Lon of race course Leeward mark
    private boolean leewardRace = false;        // true when we race toward the Leeward Mark
    private boolean windwardRace = false;       // true when we race toward the Windward Mark
    private boolean leewardSet = false;         // true if Leeward location has been set
    private boolean leewardPinSet = false;      // true if Leeward location has been set
    private boolean windwardSet = false;        // true if Windward location has been set
    private boolean sailtimerStatus = false;    // true if the SailTimer Windex is operational
    public long current_cycle_start;            // start of the current wind cycle
    public long previous_cycle_start;           // start of the previous wind cycle
    public long last_cycle_swap;                // time of last cycle swap (going from Header to Lift or visa versa)
    private long raceID = 0L;                   // ID of the current race being tracked
    private double AWA = 0.0d;                  // Apparent Wind Angle (angle between boat heading and wind direction)
    private double AWD = 0.0d;                  // Apparent Wind Direction
    private double AWS = 0.0d;                  // Apparent Wind Speed
    private double TWA = 0.0d;                  // True Wind Angle
    private double TWD = 0.0d;                  // True Wind Direction
    private double TWS = 0.0d;                  // True Wind Speed
    private double SOG = 0.0d;                  // Boat Speed over Ground
    private double COG = 0.0d;                  // Boat Course over Ground
    private double avgSOG = 0.0d;               // average SOG
    private double avgCOG = 0.0d;               // average COG
    private String gpsStatus;                   // display string with GPS status
    private String BestTack;                    // display string with the optimum tack
    private double CourseOffset = 0.0d;         // 0.0 = Windward leg, 180.0 = Downwind leg
    private String tack = "stbd";               // Starboard or Port tack (stbd, port)
    public Activity mainActivity;               //
    public Context appContext;                  // Context of Main Activity
    public int sqliteRacesToUpdate;             // number of Races to update to the Cloud
    public int sqliteRecordsToUpdate;           // number of Wind records to update to the Cloud
    public int sqliteRecordsToCloud;            // number of Wind records written to the Cloud
    public int asyncRequestQueueCounter;        // counter of the Async HTTP Requests being worked on

    //private String hashCode = "LUxeZG3iNvIHM0Z2";  // generated by getHashCode called by Activity_Main's onCreate
    private String hashCode = "v^2gUAZV7u=wS6xaD^hCxSGT";  // value after May rebuild (from Java and php)
    private double TackGybe;                    // Tack or Gybe angle (negative for port tack, positive for stbd)

    private GlobalParameters() {
        AWA = 0.0d;
    }

    public static synchronized GlobalParameters getInstance() {
        if (mInstance == null) {
            mInstance = new GlobalParameters();
        }
        return mInstance;
    }

    public void setHashCode(String x) {
        hashCode = x;
    }

    public String getHashCode() {
        return hashCode;
    }

    public double getAWA() {
        return AWA;
    }

    public void setAWA(double x) {
        AWA = x;
    }

    public double getAWD() {
        return AWD;
    }

    public void setAWD(double x) {
        AWD = x;
    }

    public double getAWS() {
        return AWS;
    }

    public void setAWS(double x) {
        AWS = x;
    }

    public double getTWD() {
        return TWD;
    }

    public void setTWD(double x) {
        TWD = x;
    }

    public double getTWS() {
        return TWS;
    }

    public void setTWS(double x) {
        TWS = x;
    }

    public double getTWA() {
        return TWA;
    }

    public void setTWA(double x) {
        TWA = x;
    }

    public double getDeclination() {
        return declination;
    }

    public void setDeclination(double x) {
        if (Double.isNaN(x)) {
            declination = 0.0d;
        } else {
            declination = x;
        }
    }

    public double getBoatLat() {
        return BoatLAT;
    }

    public void setBoatLat(double x) {
        BoatLAT = x;
    }

    public double getBoatLon() {
        return BoatLON;
    }

    public void setBoatLon(double x) {
        BoatLON = x;
    }

    public double getLeewardLat() {
        return LeewardLAT;
    }

    public void setLeewardLat(double x) {LeewardLAT = x; }

    public double getLeewardLon() {
        return LeewardLON;
    }

    public void setLeewardLon(double x) {
        LeewardLON = x;
    }

    public double getWindwardLat() {
        return WindwardLAT;
    }

    public void setWindwardLat(double x) {
        WindwardLAT = x;
    }

    public double getWindwardLon() {
        return WindwardLON;
    }

    public void setWindwardLon(double x) {
        WindwardLON = x;
    }

    public double getPinLat() {
        return PinLAT;
    }

    public void setPinLat(double x) {
        PinLAT = x;
    }

    public double getPinLon() {
        return PinLON;
    }

    public void setPinLon(double x) {
        PinLON = x;
    }

    public double getCommitteeLon() {
        return CommitteeLON;
    }

    public void setCommitteeLon(double x) {
        CommitteeLON = x;
    }

    public double getCommitteeLat() {
        return CommitteeLAT;
    }

    public void setCommitteeLat(double x) {
        CommitteeLAT = x;
    }

    public double getCenterLat() {
        return CenterLAT;
    }

    public void setCenterLat(double x) {
        CenterLAT = x;
    }

    public double getCenterLon() {
        return CenterLON;
    }

    public void setCenterLon(double x) {
        CenterLON = x;
    }

    public boolean getWindwardFlag() {
        return windwardSet;
    }

    public void setWindwardFlag(boolean x) {
        windwardSet = x;
    }

    public boolean getLeewardFlag() {
        return leewardSet;
    }

    public void setLeewardFlag(boolean x) {
        leewardSet = x;
    }

    public boolean getLeewardPinFlag() {
        return leewardPinSet;
    }

    public void setLeewardPinFlag(boolean x) {
        leewardPinSet = x;
    }

    public boolean getWindwardRace() {
        return windwardRace;
    }

    public void setSailtimerStatus(boolean x) { sailtimerStatus = x; }

    public boolean getSailtimerStatus() {
        return sailtimerStatus;
    }

    public void setWindwardRace(boolean x) {
        windwardRace = x;
    }

    public boolean getLeewardRace() {
        return leewardRace;
    }

    public void setLeewardRace(boolean x) {
        leewardRace = x;
    }

    public double getSOG() {
        return SOG;
    }

    public void setSOG(double x) {
        SOG = x;
    }

    public double getCOG() {
        return COG;
    }

    public void setCOG(double x) {
        COG = x;
    }

    public double getAvgSOG() {
        return avgSOG;
    }

    public void setAvgSOG(double x) {
        avgSOG = x;
    }

    public double getAvgCOG() {
        return avgCOG;
    }

    public void setAvgCOG(double x) {
        avgCOG = x;
    }

    /*
    public String getGpsStatus() {
        return gpsStatus;
    }

    public void setGpsStatus(String x) {
        gpsStatus = x;
    }
    */

    public String getTack() {
        return tack;
    }

    public void setTack(String x) {
        tack = x;
    }

    public double getCourseOffset() {
        return CourseOffset;
    }

    public void setCourseOffset(double x) {
        CourseOffset = x;
    }

    public double getTackGybe() {
        return TackGybe;
    }

    public void setTackGybe(double x) {
        TackGybe = x;
    }

    public String getBestTack() {
        return BestTack;
    }

    public void setBestTack(String x) {
        BestTack = x;
    }

    public long getRaceID() { return raceID; }

    public void setRaceID(long x) { raceID = x; }
}
